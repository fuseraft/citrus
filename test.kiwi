/#
 The Citrus Project 1.0.0
 #/

fn testsuite()
  println "Running Citrus Test Suite ...\n"

  results = guava::run_tests()

  succeeded = 0
  failed = 0
  duration = 0

  for r in results do
    duration += r.duration

    if r.result
      succeeded += 1
    else
      failed += 1
    end
  end

  println "\nRan ${results.size()} test(s) in ${duration}ms\n"

  if failed == 0
    println "All tests passed!"
  else
    println "${succeeded} tests passed, ${failed} tests failed."
  end
end

guava::register_test("packages", with do
  package foobar_test_pkg
    fn hello()
      return "hello"
    end
  end

  export "foobar_test_pkg"

  guava::assert(foobar_test_pkg::hello() == "hello", "A1")
end)

guava::register_test("assignments", with do
  d = 5, e = 3, a = b = c = d
  b -= e
  guava::assert(a + b + c == d * e - e, "A1")
end)

guava::register_test("var declaration", with do
  fn var_decl_one()
    var (
      f: float = 0.5,            # type-hint with initializer 
      s = "string",              # regular variable declaration
      n,                         # uninitialized variable defaults to null
      b: boolean,                # type-hint without initializer (`boolean` defaults to false)
      m: list = [[0] * 5] * 5,   # a 5x5 matrix for funsies
      l: list,                   # will be an empty list
      h: hashmap,                # will be an empty hashmap
      i: integer                 # will be 0
    )

    return [f, s, n, b, m, l, h, i]
  end

  fn var_decl_two()
    var (f: float = 0.5)          # type-hint with initializer 
    var (s = "string")            # regular variable declaration
    var (n)                       # uninitialized variable defaults to null
    var (b: boolean)              # type-hint without initializer (`boolean` defaults to false)
    var (m: list = [[0] * 5] * 5) # a 5x5 matrix for funsies
    var (l: list)                 # will be an empty list
    var (h: hashmap)              # will be an empty hashmap
    var (i: integer)              # will be 0

    return [f, s, n, b, m, l, h, i]
  end

  # declare the variables one and two
  var (one = var_decl_one())
  var (two = var_decl_two())

  guava::assert(one.to_string() == two.to_string(), "A1")

  for i in [0 .. one.size() - 1] do
    guava::assert(one[i].to_string() == two[i].to_string(), "A2")
  end
end)

guava::register_test("constants", with do
  const MSG = "hello"
  err_c = 0

  try
    MSG = "foobar"
  catch
    err_c += 1
  end

  guava::assert(MSG == "hello", "A1")
  guava::assert(err_c == 1, "A2")

  package xxx
    const Y = "hello"
  end

  export "xxx"

  guava::assert(xxx::Y == MSG, "A3")
end)

guava::register_test("truthiness", with do
  guava::assert(!null.truthy(), "A1")       # null is never truthy
  guava::assert(!(0).truthy(), "A2")        # 0 is the only non-truthy number
  guava::assert((1).truthy(), "A3")         # non-zero numbers are always truthy
  guava::assert(!"".truthy(), "A4")         # empty strings are not truthy
  guava::assert("0".truthy(), "A5")         # non-empty strings are truthy
  guava::assert(![].truthy(), "A6")         # empty lists are not truthy
  guava::assert([0].truthy(), "A7")         # non-empty lists are truthy
  guava::assert(!{}.truthy(), "A8")         # empty hashmaps are not truthy
  guava::assert({"a": 1}.truthy(), "A9")    # non-empty hashmaps are truthy
  guava::assert(!false.truthy(), "A10")     # false is never truthy
  guava::assert(true.truthy(), "A11")       # true is always truthy
end)

guava::register_test("unpacking", with do
  a, b, c =< true, {"a": false}, [1, 2, 3]

  guava::assert(a == true, "A1")
  guava::assert(b.keys().size() == 1 && b.to_string() == "{\"a\": false}", "A2")
  guava::assert(c.size() == 3 && c.to_string() == "[1, 2, 3]", "A3")

  fn get_zero_and_one()
    return [0, 1]
  end

  zero, one =< get_zero_and_one()

  guava::assert(zero == 0, "A4")
  guava::assert(one == 1, "A5")

  a, b =< [[1, 2], ["a", "b"]]

  guava::assert(a.size() == 2 && a.sum() == 3, "A6")
  guava::assert(b.size() == 2 && b.join() == "ab", "A7")
end)

guava::register_test("operators", with do
  # arithmetic
  guava::assert(10 + 20 == 30)   # addition
  guava::assert(10 - 20 == -10)  # subtraction
  guava::assert(10 * 20 == 200)  # multiplication
  guava::assert(10 / 20. == 0.5) # division
  guava::assert(10 % 2 == 0)     # modulo division
  guava::assert(10 ** 2 == 100)  # exponentiation

  # logical or 
  guava::assert(!(false || false))
  guava::assert(false || true)
  guava::assert(true || false)
  guava::assert(true || true)

  # logical and
  guava::assert(!(false && false))
  guava::assert(!(false && true))
  guava::assert(!(true && false))
  guava::assert(true && true)

  # logical not
  guava::assert(false == !true)
  guava::assert(!!true)
  guava::assert(!false)

  # comparison
  guava::assert(1 < 2)
  guava::assert(2 > 1)
  guava::assert(1 <= 1)
  guava::assert(1 >= 1)
  guava::assert(1 == 1)
  guava::assert(1 != 0)

  # bitwise operators
  a = 5
  b = 9
  guava::assert((a & b) == 1)
  guava::assert((a | b) == 13)
  guava::assert((a ^ b) == 12)
  guava::assert(a << 1 == 10)
  guava::assert(a >> 1 == 2)
  guava::assert(~a == -6)

  # bitswap
  old_a = a
  old_b = b
  a = a ^ b
  b = a ^ b
  a = a ^ b
  guava::assert(b == old_a)
  guava::assert(a == old_b)
end)

guava::register_test("strings", with do
  # simple concatenation
  a = "Hello"
  b = " World"
  guava::assert(a + b == "Hello World", "A1")

  # concatenation expression
  a = "Hello"
  b = "World"
  guava::assert((a + " " + b) == "Hello World", "A2")

  # string interpolation
  guava::assert("${a} ${b}" == "Hello World", "A3")

  wrap_string = with (inputstring, openchar, closechar) do
    return "${openchar}${inputstring}${closechar}"
  end

  guava::assert(wrap_string("div", "<", ">") == "<div>", "A4")

  # string multiplication
  a = "Hello"
  b = 5
  guava::assert(a * b == "HelloHelloHelloHelloHello", "A5")
end)

guava::register_test("lists", with do
  # Basic List Operations
  basic_list = [1, 2, 3]
  guava::assert(basic_list.size() == 3, "A1")
  guava::assert(basic_list[0] == 1, "A2")
  guava::assert(basic_list[1] == 2, "A3")
  guava::assert(basic_list[2] == 3, "A4")
  # List Insertion
  basic_list.push(4)
  guava::assert(basic_list.size() == 4 && basic_list.sum() == 10, "A5")
  # List Concatenation
  other_list = [5, 6, 7]
  combined_list = basic_list.concat(other_list)
  guava::assert(combined_list.size() == 7 && combined_list.sum() == 28, "A6")

  # List Joining
  words = ["The", "Kiwi", "Programming", "Language"]
  guava::assert(words.join(" ") == "The Kiwi Programming Language", "A7")
  guava::assert(words.join("-") == "The-Kiwi-Programming-Language", "A8")
  guava::assert(words.join("") == "TheKiwiProgrammingLanguage", "A9")
  guava::assert(words.join() == "TheKiwiProgrammingLanguage", "A10")

  # List Slicing
  sliced_list = combined_list[2:5]
  guava::assert(sliced_list.size() == 3 && sliced_list.sum() == 12, "A11")

  # List Reversal
  reversed_list = combined_list[::-1]
  guava::assert(reversed_list.size() == 7 && reversed_list.first() == 7 && reversed_list.sum() == 28, "A12")

  # Nested Lists and Flattening
  nested_list = [1, 2, [3, 4], [5, [6, 7]]].flatten()
  guava::assert(nested_list.size() == 7 && nested_list.sum() == 28, "A13")

  # String to List Conversion and Manipulation
  char_list = "abcdef".chars().reverse()
  guava::assert(char_list.join() == "fedcba", "A14")

  # Empty List Verification
  new_list = []
  while !char_list.empty() do
    new_list.push(char_list.first())
    char_list.remove_at(0)
  end
  guava::assert(char_list.empty(), "A15")
  guava::assert(new_list.join() == "fedcba", "A16")

  # List Initialization with a Range
  range_list = [1..5]
  guava::assert(range_list.size() == 5 && range_list.sum() == 15, "A17")

  a = [1..10]
  b = a.select(with (i) do i % 2 == 0 end)
  c = a - b
  d = []
  d += b
  d += c

  guava::assert(d.to_string() == "[2, 4, 6, 8, 10, 1, 3, 5, 7, 9]", "A18")
end)

guava::register_test("sets", with do
  s1 = Set.new([1, 2, 3])
  s2 = Set.new([1, 2])
  s3 = Set.new([4, 5])
  s4 = Set.new([1, 2, 3, 4])

  guava::assert(s1.subset(s2) == false, "A1")
  guava::assert(s2.subset(s1) == true, "A2")
  guava::assert(s3.subset(s1) == false, "A3")
  guava::assert(s2.subset(s2) == true, "A4")
  guava::assert(s2.subset(s4) == true, "A5")
  guava::assert(s1.superset(s2) == true, "A6")
  guava::assert(s2.superset(s1) == false, "A7")
  guava::assert(s1.superset(s3) == false, "A8")
  guava::assert(s2.superset(s2) == true, "A9")
  guava::assert(s4.superset(s2) == true, "A10")
  
  a1 = Set.new([3,6,4])
  a2 = Set.new([1,2,3,4,5,6,7,8,9])
  
  a3 = a2.difference(a1)
  guava::assert(a3.to_list().to_string() == [1, 2, 5, 7, 8, 9].to_string(), "A11")
  
  a3.clear()
  guava::assert(a3.to_list().empty(), "A12")
end)

guava::register_test("heaps", with do
  min_heap = Heap.new("min")
  max_heap = Heap.new("max")

  # Insert elements into the min-heap
  min_heap.insert(5)
  min_heap.insert(3)
  min_heap.insert(8)
  min_heap.insert(1)

  # Extract root from min-heap
  guava::assert(min_heap.extract_root() == 1, "A1")
  guava::assert(min_heap.extract_root() == 3, "A2")

  # Insert elements into the max-heap
  max_heap.insert(5)
  max_heap.insert(3)
  max_heap.insert(8)
  max_heap.insert(1)

  # Extract root from max-heap
  guava::assert(max_heap.extract_root() == 8, "A3")
  guava::assert(max_heap.extract_root() == 5, "A4")
end)

guava::register_test("hashmaps", with do
  hash = {
    "key1": true, 
    "key2": 1, 
    "key3": ["a", "b", "c"]
  }

  other_hashmap = {}

  for key in hash.keys() do 
    other_hashmap[key] = hash[key] 
  end
  
  other_hashmap = {}
  other_hashmap = hash.merge(other_hashmap)
  for k in hash.keys() do
    guava::assert(other_hashmap.has_key(k), "A1")
    guava::assert(other_hashmap.get(k).to_string() == hash.get(k).to_string(), "A2")
  end

  other_hashmap.remove("key1")
  guava::assert(other_hashmap.keys().sort().join() == "key2key3", "A3")
  guava::assert(other_hashmap.values().sort().first() == 1, "A4")

  other_hashmap.clear()
  guava::assert(other_hashmap.empty(), "A5")

  other_hashmap.hello = "world"
  guava::assert(other_hashmap.get("hello") == "world", "A6")
  
  other_hashmap.set("hello", "kiwi")
  guava::assert(other_hashmap.hello == "kiwi", "A7")
end)

guava::register_test("structs", with do
  struct Shape
    fn area() end
    fn perimeter() end
  end

  struct Circle < Shape
    fn new(radius)
      @radius = radius
    end

    fn area()
      return 3.14159 * @radius * @radius
    end

    fn perimeter()
      return 2 * 3.14159 * @radius
    end
  end

  circle = Circle.new(5)

  # magic numbers everywhere
  guava::assert(__floor__(circle.area()).to_integer() == 78)
  guava::assert(__floor__(circle.perimeter()).to_integer() == 31)
end)

guava::register_test("builtins", with do
  a = "FooBar".lowercase() 
  guava::assert("${a}${a.uppercase()}" == "foobarFOOBAR", "A1")
  guava::assert(a.index("bar") == 3, "A2")
  guava::assert(a.chars().size() == 6, "A3")
  guava::assert("foobar".replace("foo", "food") == "foodbar", "A4")
  guava::assert(!a.begins_with("food"), "A5")
  guava::assert("foobar".ends_with("bar"), "A6")
  guava::assert(!"foobar".ends_with("bark"), "A7")
end)

guava::register_test("standard library", with do
  guava::assert(string::mirror("hello") == "helloolleh", "A1")
end)

guava::register_test("nulls", with do
  e = {"a": null, "b": null}
  guava::assert(e.get("a") == null, "A1")
  guava::assert(e.get("b") == null, "A2")

  e.a = false
  e.b = "hello"
  guava::assert(e.get("a") == false, "A3")
  guava::assert(e.get("b") == "hello", "A4")

  e.a = null
  e.b = null
  guava::assert(e.get("a") == null, "A5")
  guava::assert(e.get("b") == null, "A6")

  e = null
  guava::assert(e == null, "A7")

  e = 0
  guava::assert(e != null, "A8")

  guava::assert(!null, "A9")
  guava::assert(!!!null, "A10")
end)

guava::register_test("type checks", with do
  s = "kiwi"
  i = 100
  d = 3.14159
  b = true
  h = {"a": [123, 456, "789"]}

  guava::assert(s.is_a(String), "A1")
  guava::assert(i.is_a(Integer), "A2")
  guava::assert(d.is_a(Float), "A3")
  guava::assert(b.is_a(Boolean), "A4")
  guava::assert(null.is_a(None), "A5")
  guava::assert(h.is_a(Hashmap), "A6")
  guava::assert(h.a.is_a(List), "A7")
end)

guava::register_test("loops", with do
  fruits = ["kiwi", "strawberry", "pineapple", "lime", "mango", "guava"]
  new_list = []

  # iterate list
  for fruit in fruits do
    new_list.push(fruit)
  end

  guava::assert(new_list.join() == "kiwistrawberrypineapplelimemangoguava", "A1")
  new_list.clear()

  # iterate index
  for fruit, index in fruits do 
    new_list.push(index)
  end

  guava::assert(new_list.sum() == 15, "A2")
  new_list.clear()

  # iterate inline list
  for item in ["kiwi", "is", "fun"] do
    new_list.push(item)
  end

  guava::assert(new_list.join() == "kiwiisfun", "A3")
  new_list.clear()

  # iterate an inline list with an index
  for item, index in ["kiwi", "is", "fun"] do
    new_list.push(index)
  end

  guava::assert(new_list.sum() == 3 && new_list.size() == 3, "A4")
  new_list.clear()

  # iterate a range
  for i in [0..5] do
    new_list.push(i)
  end

  guava::assert(new_list.size() == 6 && new_list.sum() == 15, "A5")
  new_list.clear()

  # nested while loops
  var (test_sum: integer = 0)
  i = 0
  j = 0
  while i < 10 do
      i += 1
      j = 0

      while j < 10 do
          j += 1
          test_sum += 1
      end
  end

  guava::assert(test_sum == 100, "A7")

  new_list = []
  i = 1
  while i <= 10 do
    new_list.push("Item ${i}")
    i += 1
  end

  counter = 0
  for item, index in new_list do
    counter += 1
    break when index == 4
  end

  guava::assert(counter == 5, "A8")

  counter = 0
  for item, index in new_list do
    counter += 1
    break when index == 5
  end

  guava::assert(counter == 6, "A9")

  # repeat-loop
  sum = 0
  repeat 10 as i do
    sum += i
  end

  guava::assert(sum == 55, "A10")

  x = 2
  repeat 4 do
    x *= x
  end

  guava::assert(x == 65536, "A11")
end)

guava::register_test("try-finally", with do
  a = 0, b = 0

  try
    a += 1
    println "${1 / 0}"
    a += 1
  finally
    b += 1
  end
  
  guava::assert(a == 1)
  guava::assert(b == 1)
end)

guava::register_test("try-catch-finally", with do
  a = 0, b = 0, c = 0

  try
    for i in [0 .. 1] do
      a += 1
      println "${i / 0}"
      a += 1
    end
  catch (err)
    b += 1
  finally
    c += 1
  end

  guava::assert(a == 1)
  guava::assert(b == 1)
  guava::assert(c == 1)
end)

guava::register_test("nested try-catch", with do
  a = 0, b = 0, c = 0

  for i in [0 .. 1] do
    try
      a += 1
      println "${i / 0}"
    catch (err, msg)
      b += 1
    finally
      c += 1
    end
  end

  guava::assert(a == 2)
  guava::assert(b == 2)
  guava::assert(c == 2)
end)

guava::register_test("lambdas", with do
  # setup
  new_list = [{"id": 0}, {"id": 1}, {"id": 2}, {"id": 3}, {"id": 4},
          {"id": 5}, {"id": 6}, {"id": 7}, {"id": 8}, {"id": 9}]

  # Assigned and inline lambdas
  odd_item_id = with (item) do return item.id % 2 != 0 end # Define an assigned lambda.
  puts = with (s) do return s end # Defining a lambda and using it to wrap functionality.
  guava::assert(puts("Hello, World!") == "Hello, World!", "A1")

  # Lambdas as first-class citizens
  fn use_lambda(print_func, message) return print_func(message) end
  guava::assert(use_lambda(puts, "Hello, Kiwi!") == "Hello, Kiwi!", "A2")

  guava::assert(new_list.select(with (item) do return item["id"] % 2 == 0 end).map(with (item) do item["id"] end).sum() == 20, "A3")
  guava::assert(new_list.select(odd_item_id).map(with (item) do item["id"] end).sum() == 25, "A4")

  # List.reduce
  numbers = [1, 2, 3, 4, 5]

  guava::assert((numbers.reduce(0, with (accumulator, number) do
    accumulator += number
  end)) == 15, "A6")

  guava::assert((numbers.reduce({}, with (accumulator, number) do
    accumulator["key${number}"] = number
  end)).keys().reduce("", with (accumulator, key) do 
    accumulator += key end
  ) == "key1key2key3key4key5", "A7")

  # Inline lambda assignment
  x = (with (n) do n ** 2 end)(5)
  guava::assert(x == 25, "A8")
end)

testsuite()
