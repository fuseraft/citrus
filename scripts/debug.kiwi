const PRINT = false

package time
  fn ticks(): integer
    return __ticks__()
  end

  fn ticksms(ticks: integer): integer
    return __ticksms__(ticks)
  end
end

export "time"

package std
  fn range(start, stop)
    return [start..stop - 1]
  end
end

export "std"

package string
  fn isnumeric(s)
    var (alpha = "0123456789")

    for c in s do
      if !alpha.contains(c)
        return false
      end
    end

    return true
  end
end

export "string"

fn get_calc(): hashmap
  return {}.set("add", (with (a: float, b: float) do a + b end))
           .set("sub", (with (a: float, b: float) do a - b end))
           .set("mul", (with (a: float, b: float) do a * b end))
           .set("div", (with (a: float, b: float) do a / b end))
end

fn do_mathy_stuff(calc: hashmap): float
  var (a: float = 1.0,
       b: float = 2.0,
       c: float = 0.0)

  for op in calc do
    var (func: lambda = calc.get(op))
    
    if PRINT
      println "${op}(${a}, ${b}) = ${func(a, b)}"
    end

    c += func(a, b)
  end

  return c
end

fn test(): float
  var (calc: hashmap = get_calc(),
       sum: float = 0.0)

  for i in [1..1000] do
    sum += do_mathy_stuff(calc)
  end

  return sum
end

fn benchmark(): integer
  var (start: integer = time::ticks(),
       _ = test(),
       stop: integer = time::ticks(), 
       duration: integer = time::ticksms(stop - start))
  
  if PRINT
    println "computed in ${duration} milliseconds."
  end

  return duration
end

fn main(argv: list = [])
  var (num_runs: integer = 1,
       results: list = [],
       total_duration: float)

  if !argv.empty() && string::isnumeric(argv.first())
    num_runs = argv.first().to_int()
  end

  for run in std::range(0, num_runs) do
    var (duration: integer = benchmark())
    results.push(duration)
    total_duration += duration
  end

  println "durations: ${results}"
  println "minimum: ${results.min()}"
  println "maximum: ${results.max()}"
  println "average: ${total_duration / results.size()}"
end

main()